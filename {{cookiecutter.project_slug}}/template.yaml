AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Hello World AWS Lambda and Amazon API Gateway REST API
  Sample AWS SAM template to create a simple Lambda function connected to a REST API.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Api From Stack ${AWS::StackName}
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /{micro-service}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getMicroservice.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createMicroservice.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateMicroservice.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteMicroservice.Arn}/invocations
              responses: {}
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  createMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Stack ${AWS::StackName} Function createMicroservice
      CodeUri: src/Function2
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTmicroservice:
          Type: Api
          Properties:
            Path: /{micro-service}
            Method: POST
            RestApiId: !Ref Api
      Architectures:
        - arm64
      Environment: {}
  createMicroserviceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createMicroservice}
  getMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Stack ${AWS::StackName} Function getMicroservice
      CodeUri: src/Function
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETmicroservice:
          Type: Api
          Properties:
            Path: /{micro-service}
            Method: GET
            RestApiId: !Ref Api
      Architectures:
        - arm64
      Environment: {}
  getMicroserviceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getMicroservice}
  updateMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Stack ${AWS::StackName} Function updateMicroservice
      CodeUri: src/Function3
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPUTmicroservice:
          Type: Api
          Properties:
            Path: /{micro-service}
            Method: PUT
            RestApiId: !Ref Api
      Architectures:
        - arm64
      Environment: {}
  updateMicroserviceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${updateMicroservice}
  deleteMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Stack ${AWS::StackName} Function deleteMicroservice
      CodeUri: src/Function4
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiDELETEmicroservice:
          Type: Api
          Properties:
            Path: /{micro-service}
            Method: DELETE
            RestApiId: !Ref Api
      Architectures:
        - arm64
      Environment: {}
  deleteMicroserviceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteMicroservice}